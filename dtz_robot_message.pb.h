// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dtz_robot_message.proto

#ifndef PROTOBUF_dtz_5frobot_5fmessage_2eproto__INCLUDED
#define PROTOBUF_dtz_5frobot_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace prototest {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dtz_5frobot_5fmessage_2eproto();
void protobuf_AssignDesc_dtz_5frobot_5fmessage_2eproto();
void protobuf_ShutdownFile_dtz_5frobot_5fmessage_2eproto();

class RobotMessage;

// ===================================================================

class RobotMessage : public ::google::protobuf::Message {
 public:
  RobotMessage();
  virtual ~RobotMessage();

  RobotMessage(const RobotMessage& from);

  inline RobotMessage& operator=(const RobotMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotMessage& default_instance();

  void Swap(RobotMessage* other);

  // implements Message ----------------------------------------------

  RobotMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RobotMessage& from);
  void MergeFrom(const RobotMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline const ::std::string& state() const;
  inline void set_state(const ::std::string& value);
  inline void set_state(const char* value);
  inline void set_state(const char* value, size_t size);
  inline ::std::string* mutable_state();
  inline ::std::string* release_state();
  inline void set_allocated_state(::std::string* state);

  // optional string opt = 3;
  inline bool has_opt() const;
  inline void clear_opt();
  static const int kOptFieldNumber = 3;
  inline const ::std::string& opt() const;
  inline void set_opt(const ::std::string& value);
  inline void set_opt(const char* value);
  inline void set_opt(const char* value, size_t size);
  inline ::std::string* mutable_opt();
  inline ::std::string* release_opt();
  inline void set_allocated_opt(::std::string* opt);

  // @@protoc_insertion_point(class_scope:prototest.RobotMessage)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_opt();
  inline void clear_has_opt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* state_;
  ::std::string* opt_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_dtz_5frobot_5fmessage_2eproto();
  friend void protobuf_AssignDesc_dtz_5frobot_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_dtz_5frobot_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static RobotMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// RobotMessage

// required int32 id = 1;
inline bool RobotMessage::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobotMessage::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RobotMessage::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RobotMessage::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 RobotMessage::id() const {
  // @@protoc_insertion_point(field_get:prototest.RobotMessage.id)
  return id_;
}
inline void RobotMessage::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:prototest.RobotMessage.id)
}

// required string state = 2;
inline bool RobotMessage::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RobotMessage::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RobotMessage::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RobotMessage::clear_state() {
  if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_->clear();
  }
  clear_has_state();
}
inline const ::std::string& RobotMessage::state() const {
  // @@protoc_insertion_point(field_get:prototest.RobotMessage.state)
  return *state_;
}
inline void RobotMessage::set_state(const ::std::string& value) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_ = new ::std::string;
  }
  state_->assign(value);
  // @@protoc_insertion_point(field_set:prototest.RobotMessage.state)
}
inline void RobotMessage::set_state(const char* value) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_ = new ::std::string;
  }
  state_->assign(value);
  // @@protoc_insertion_point(field_set_char:prototest.RobotMessage.state)
}
inline void RobotMessage::set_state(const char* value, size_t size) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_ = new ::std::string;
  }
  state_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:prototest.RobotMessage.state)
}
inline ::std::string* RobotMessage::mutable_state() {
  set_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:prototest.RobotMessage.state)
  return state_;
}
inline ::std::string* RobotMessage::release_state() {
  clear_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = state_;
    state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RobotMessage::set_allocated_state(::std::string* state) {
  if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete state_;
  }
  if (state) {
    set_has_state();
    state_ = state;
  } else {
    clear_has_state();
    state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:prototest.RobotMessage.state)
}

// optional string opt = 3;
inline bool RobotMessage::has_opt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RobotMessage::set_has_opt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RobotMessage::clear_has_opt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RobotMessage::clear_opt() {
  if (opt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opt_->clear();
  }
  clear_has_opt();
}
inline const ::std::string& RobotMessage::opt() const {
  // @@protoc_insertion_point(field_get:prototest.RobotMessage.opt)
  return *opt_;
}
inline void RobotMessage::set_opt(const ::std::string& value) {
  set_has_opt();
  if (opt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opt_ = new ::std::string;
  }
  opt_->assign(value);
  // @@protoc_insertion_point(field_set:prototest.RobotMessage.opt)
}
inline void RobotMessage::set_opt(const char* value) {
  set_has_opt();
  if (opt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opt_ = new ::std::string;
  }
  opt_->assign(value);
  // @@protoc_insertion_point(field_set_char:prototest.RobotMessage.opt)
}
inline void RobotMessage::set_opt(const char* value, size_t size) {
  set_has_opt();
  if (opt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opt_ = new ::std::string;
  }
  opt_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:prototest.RobotMessage.opt)
}
inline ::std::string* RobotMessage::mutable_opt() {
  set_has_opt();
  if (opt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opt_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:prototest.RobotMessage.opt)
  return opt_;
}
inline ::std::string* RobotMessage::release_opt() {
  clear_has_opt();
  if (opt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = opt_;
    opt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RobotMessage::set_allocated_opt(::std::string* opt) {
  if (opt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete opt_;
  }
  if (opt) {
    set_has_opt();
    opt_ = opt;
  } else {
    clear_has_opt();
    opt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:prototest.RobotMessage.opt)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace prototest

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dtz_5frobot_5fmessage_2eproto__INCLUDED
